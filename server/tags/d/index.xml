<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>D on Blog</title>
    <link>https://maikklein.github.io/tags/d/</link>
    <description>Recent content in D on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 25 Mar 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://maikklein.github.io/tags/d/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Why and when you should use SoA</title>
      <link>https://maikklein.github.io/post/soa-d/</link>
      <pubDate>Fri, 25 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://maikklein.github.io/post/soa-d/</guid>
      <description>

&lt;h1 id=&#34;what-is-soa:45fcc6ad2f422f60b5d46d1e0ac7de22&#34;&gt;What is SoA?&lt;/h1&gt;

&lt;p&gt;SoA just means &lt;code&gt;Structure of arrays&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-d&#34;&gt;//AoS: Array of structures
struct Vec2{
    float x;
    float y;
}
Array!Vec2 vectors;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-d&#34;&gt;//SoA: Structure of arrays
struct Vec2{
    float[] x;
    float[] y;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;why-is-soa-useful:45fcc6ad2f422f60b5d46d1e0ac7de22&#34;&gt;Why is SoA useful?&lt;/h1&gt;

&lt;p&gt;Imagine you want to write a small &lt;code&gt;udp game server&lt;/code&gt; with a &lt;code&gt;client server architecture&lt;/code&gt;. You will have a server where clients can connect to. The &lt;code&gt;server&lt;/code&gt; needs to remember which clients are currently connected. The server polls messages with &lt;code&gt;recvfrom&lt;/code&gt; and in case you are not familiar with udp &lt;code&gt;recvfrom&lt;/code&gt; returns the packet that was sent to the port where to socket was bound to and the address.&lt;/p&gt;

&lt;p&gt;When a packet comes in the first thing you probably want to know is if the packet came from a connected client. You would be inclined to write it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;struct Server{
    struct RemoteClient{
        Address address;
        SysTime lastReceivedPacket;
        //more data
    }
    Array!RemoteClient remoteClients;

    void poll(){
        //Address address
        //recvfrom(buffer, address);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we want to know which client has sent the package we can just use the &lt;code&gt;remoteClients&lt;/code&gt; array to find the correct &lt;code&gt;remoteClient&lt;/code&gt;. The problem is that we need to iterate over &lt;code&gt;RemoteClient&lt;/code&gt; but we are only really interested in the address field. That means we needlessly load all the other data like &lt;code&gt;lastReceivedPacket&lt;/code&gt; even if we don&amp;rsquo;t need it.&lt;/p&gt;

&lt;p&gt;And if you are curious how much data could be inside a &lt;code&gt;RemoteClient&lt;/code&gt; in a real world application, here is the struct of &lt;a href=&#34;https://github.com/lsalzman/enet/blob/master/include/enet/enet.h#L258&#34;&gt;Enet Peer&lt;/a&gt;. It might not be the fairest comparison because it is a &lt;code&gt;Peer&lt;/code&gt; and not a &lt;code&gt;RemoteClient&lt;/code&gt; but it should illustrate the point that your data might grow fairly large.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;typedef struct _ENetPeer
{ 
   ENetListNode  dispatchList;
   struct _ENetHost * host;
   enet_uint16   outgoingPeerID;
   enet_uint16   incomingPeerID;
   enet_uint32   connectID;
   enet_uint8    outgoingSessionID;
   enet_uint8    incomingSessionID;
   ENetAddress   address;            /**&amp;lt; Internet address of the peer */
   void *        data;               /**&amp;lt; Application private data, may be freely modified */
   ENetPeerState state;
   ENetChannel * channels;
   size_t        channelCount;       /**&amp;lt; Number of channels allocated for communication with peer */
   enet_uint32   incomingBandwidth;  /**&amp;lt; Downstream bandwidth of the client in bytes/second */
   enet_uint32   outgoingBandwidth;  /**&amp;lt; Upstream bandwidth of the client in bytes/second */
   enet_uint32   incomingBandwidthThrottleEpoch;
   enet_uint32   outgoingBandwidthThrottleEpoch;
   enet_uint32   incomingDataTotal;
   enet_uint32   outgoingDataTotal;
   enet_uint32   lastSendTime;
   enet_uint32   lastReceiveTime;
   enet_uint32   nextTimeout;
   enet_uint32   earliestTimeout;
   enet_uint32   packetLossEpoch;
   enet_uint32   packetsSent;
   enet_uint32   packetsLost;
   enet_uint32   packetLoss;          /**&amp;lt; mean packet loss of reliable packets as a ratio with respect to the constant ENET_PEER_PACKET_LOSS_SCALE */
   enet_uint32   packetLossVariance;
   enet_uint32   packetThrottle;
   enet_uint32   packetThrottleLimit;
   enet_uint32   packetThrottleCounter;
   enet_uint32   packetThrottleEpoch;
   enet_uint32   packetThrottleAcceleration;
   enet_uint32   packetThrottleDeceleration;
   enet_uint32   packetThrottleInterval;
   enet_uint32   pingInterval;
   enet_uint32   timeoutLimit;
   enet_uint32   timeoutMinimum;
   enet_uint32   timeoutMaximum;
   enet_uint32   lastRoundTripTime;
   enet_uint32   lowestRoundTripTime;
   enet_uint32   lastRoundTripTimeVariance;
   enet_uint32   highestRoundTripTimeVariance;
   enet_uint32   roundTripTime;
   enet_uint32   roundTripTimeVariance;
   enet_uint32   mtu;
   enet_uint32   windowSize;
   enet_uint32   reliableDataInTransit;
   enet_uint16   outgoingReliableSequenceNumber;
   ENetList      acknowledgements;
   ENetList      sentReliableCommands;
   ENetList      sentUnreliableCommands;
   ENetList      outgoingReliableCommands;
   ENetList      outgoingUnreliableCommands;
   ENetList      dispatchedCommands;
   int           needsDispatch;
   enet_uint16   incomingUnsequencedGroup;
   enet_uint16   outgoingUnsequencedGroup;
   enet_uint32   unsequencedWindow [ENET_PEER_UNSEQUENCED_WINDOW_SIZE / 32]; 
   enet_uint32   eventData;
   size_t        totalWaitingData;
} ENetPeer;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let us see how it would look with &lt;code&gt;SoA&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;struct Server{
    struct RemoteClients{
        size_t length;
        Address[] address;
        SysTime[] lastReceivedPacket;
        //more data
    }
    RemoteClients remoteClients;

    void poll(){
        //Address address
        //recvfrom(buffer, address);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can access all addresses with &lt;code&gt;remoteClients.address&lt;/code&gt; and we don&amp;rsquo;t need to load unnecessary data into the cache.&lt;/p&gt;

&lt;h1 id=&#34;isn-t-soa-awkward-to-use:45fcc6ad2f422f60b5d46d1e0ac7de22&#34;&gt;Isn&amp;rsquo;t SoA awkward to use?&lt;/h1&gt;

&lt;p&gt;In most languages it is.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;struct RemoteClients{
    size_t length;
    Address[] address;
    SysTime[] lastReceivedPacket;
    //more data
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The definition is simplified because we need to allocate the arrays, grow them if we want to have dynamic arrays. We also need to worry about inserting and removing elements, it shouldn&amp;rsquo;t happen that we only add an address to &lt;code&gt;RemoteClients&lt;/code&gt; without adding &lt;code&gt;lastReceivedPacket&lt;/code&gt;. That is because the data is loosely coupled. Previously with &lt;code&gt;AoS&lt;/code&gt; we could access the &lt;code&gt;RemoteClient&lt;/code&gt; with &lt;code&gt;remoteClients[index]&lt;/code&gt; but now we are accessing a &lt;code&gt;RemoteClient&lt;/code&gt; by its components
&lt;code&gt;remoteClients.addresses[index]&lt;/code&gt; and &lt;code&gt;remoteClients.lastReceivedPacket[index]&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;implementing-soa-in-d:45fcc6ad2f422f60b5d46d1e0ac7de22&#34;&gt;Implementing SoA in D&lt;/h1&gt;

&lt;p&gt;First let us start with a demonstration.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-d&#34;&gt;struct Vec2{
    float x;
    float y;
}
auto s = SOA!(Vec2)();

s.insertBack(1.0f, 2.0f);
s.insertBack(Vec2(1.0, 2.0f));
writeln(s.x); // [1, 1]
writeln(s.y); // [2, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can still create a struct with our data, &lt;code&gt;SOA&lt;/code&gt; will then look at the struct and create the correct arrays internally. &lt;code&gt;insertBack&lt;/code&gt; is now a bit different from a normal array because internally we have as many arrays as we have fields. That means &lt;code&gt;insertBack&lt;/code&gt; needs to be variadic. Alternatively &lt;code&gt;insertBack&lt;/code&gt; could also accept the struct itself.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The following code is not intended to be production ready code, it is merely a proof of concept.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-d&#34;&gt;struct SOA(T){
    import std.experimental.allocator;
    import std.experimental.allocator.mallocator;

    import std.meta: staticMap;
    import std.typecons: Tuple;
    import std.traits: FieldNameTuple;

    alias toArray(T) = T[];
    alias toType(string s) = typeof(__traits(getMember, T, s));

    alias MemberNames = FieldNameTuple!T;
    alias Types = staticMap!(toType, MemberNames);
    alias ArrayTypes = staticMap!(toArray, Types);

    this(size_t _size, IAllocator _alloc = allocatorObject(Mallocator.instance)){
        alloc = _alloc;
        size = _size;
        allocate(size);
    }

    ref auto opDispatch(string name)(){
        import std.meta: staticIndexOf;
        alias index = staticIndexOf!(name, MemberNames);
        static assert(index &amp;gt;= 0);
        return containers[index];
    }

    void insertBack(Types types){
        if(length == size) grow;
        foreach(index, ref container; containers){
            container[length] = types[index];
        }
        length = length + 1;
    }

    void insertBack(T t){
        if(length == size) grow;
        foreach(index, _; Types){
            containers[index][length] = __traits(getMember, t, MemberNames[index]);
        }
        length = length + 1;
    }

    size_t length() const @property{
        return _length;
    }

    ~this(){
        if(alloc is null) return;
        foreach(ref container; containers){
            alloc.dispose(container);
        }
    }

private:
    void length(size_t len)@property{
        _length = len;
    }

    Tuple!ArrayTypes containers;
    IAllocator alloc;

    size_t _length = 0;
    size_t size = 0;
    short growFactor = 2;

    void allocate(size_t size){
        if(alloc is null){
            alloc = allocatorObject(Mallocator.instance);
        }
        foreach(index, ref container; containers){
            container = alloc.makeArray!(Types[index])(size);
        }
    }

    void grow(){
        import std.algorithm: max;
        size_t newSize = max(1,size * growFactor);
        size_t expandSize = newSize - size;

        if(size is 0){
            allocate(newSize);
        }
        else{
            foreach(ref container; containers){
                alloc.expandArray(container, expandSize);
            }
        }
        size = newSize;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-d&#34;&gt;alias toArray(T) = T[];
alias toType(string s) = typeof(__traits(getMember, T, s));

alias MemberNames = FieldNameTuple!T;
alias Types = staticMap!(toType, MemberNames);
alias ArrayTypes = staticMap!(toArray, Types);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;MemberNames&lt;/code&gt; are just the names of the fields. For example &lt;code&gt;struct Vec2{float x; float y}&lt;/code&gt; will have the type &lt;code&gt;AliasSeq!(&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;)&lt;/code&gt;. &lt;code&gt;toType&lt;/code&gt; takes the member name and turns it into an actual type. In the example above &lt;code&gt;toType!(&amp;quot;x&amp;quot;)&lt;/code&gt; would return the type &lt;code&gt;float&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we can convert the member names into actual types with the help of &lt;code&gt;staticMap&lt;/code&gt;. In the example above &lt;code&gt;AliasSeq!(&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;)&lt;/code&gt; would be transformed into &lt;code&gt;AliasSeq!(float, float)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We are almost there we just now need to convert the types to arrays. &lt;code&gt;AliasSeq!(float, float)&lt;/code&gt; to &lt;code&gt;AliasSeq!(float[], float[])&lt;/code&gt;. We do this with &lt;code&gt;toArray&lt;/code&gt; and &lt;code&gt;staticMap&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After that we can create a tuple of arrays&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-d&#34;&gt;Tuple!ArrayTypes containers;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inserting elements is fairly easy now.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-d&#34;&gt;void insertBack()(Types types){
    if(length == size) grow;
    foreach(index, ref container; containers){
        container[length] = types[index];
    }
    length = length + 1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We already now what types &lt;code&gt;insertBack&lt;/code&gt; should accept. It should accept the types of the fields of the struct. We then iterate over &lt;code&gt;containers&lt;/code&gt; at compile time, which is our tuple of arrays.&lt;/p&gt;

&lt;p&gt;Then we just access the correct &lt;code&gt;argument&lt;/code&gt; with &lt;code&gt;types[index]&lt;/code&gt; and insert it into the array.&lt;/p&gt;

&lt;p&gt;We can also insert the struct itself.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-d&#34;&gt;void insertBack(T t){
    if(length == size) grow;
    foreach(index, _; Types){
        containers[index][length] = __traits(getMember, t, MemberNames[index]);
    }
    length = length + 1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We iterate over the Types to get the &lt;code&gt;index&lt;/code&gt;. We use &lt;code&gt;index&lt;/code&gt; to get the correct container and to find the correct field name of the struct. This works because the order is always the same.&lt;/p&gt;

&lt;p&gt;The code above for &lt;code&gt;Vec2&lt;/code&gt; would roughly look like this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-d&#34;&gt;void insertBack(Vec2 t){
    if(length == size) grow;
    containers[0][length] = t.x;
    containers[1][length] = t.y;
    length = length + 1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can access the arrays with the field names. In D this is very easy to do with &lt;code&gt;opDispatch&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-d&#34;&gt;ref auto opDispatch(string name)(){
    import std.meta: staticIndexOf;
    alias index = staticIndexOf!(name, MemberNames);
    static assert(index &amp;gt;= 0);
    return containers[index];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the example above for &lt;code&gt;Vec2&lt;/code&gt; we can get to the array of all x&amp;rsquo;s with &lt;code&gt;s.x&lt;/code&gt; or all y&amp;rsquo;s with &amp;rsquo;s.y&amp;rsquo;. &lt;code&gt;opDispatch&lt;/code&gt; would roughly look like this at compile time if we call &lt;code&gt;s.x&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-d&#34;&gt;ref auto opDispatch(){
    import std.meta: staticIndexOf;
    alias index = staticIndexOf!(&amp;quot;x&amp;quot;, MemberNames);
    static assert(index &amp;gt;= 0);
    return containers[index];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We just get the index of &lt;code&gt;opDispatch&lt;/code&gt; &lt;code&gt;name&lt;/code&gt; in &lt;code&gt;MemberNames&lt;/code&gt;, if it is not inside &lt;code&gt;MemberNames&lt;/code&gt; &lt;code&gt;opDispatch&lt;/code&gt; will fail. If it is inside &lt;code&gt;MemberNames&lt;/code&gt; we just access the correct container with the index.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;struct Server{
    struct RemoteClients{
        Address address;
        SysTime lastReceivedPacket;
        //more data
    }
    SOA!RemoteClient remoteClients;

    void poll(){
        //Address address
        //recvfrom(buffer, address);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;when-to-use-soa:45fcc6ad2f422f60b5d46d1e0ac7de22&#34;&gt;When to use SoA&lt;/h1&gt;

&lt;p&gt;Firs ot all &lt;code&gt;SoA&lt;/code&gt; is not a silver bullet and it doesn&amp;rsquo;t mean you should replace &lt;code&gt;AoS&lt;/code&gt; with &lt;code&gt;SoA&lt;/code&gt; everywhere in your code base.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SoA&lt;/code&gt; makes sense if:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You know that you want to store your data in an array.&lt;/li&gt;
&lt;li&gt;You want partial access to the data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But sometimes you still want to access all components of your data. An example would be a vector.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-d&#34;&gt;struct Vec3{
    float x;
    float y;
    float z;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Most operations will use all components anyways like add, subtract, dot, length and many more. And even if you sometimes end up with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-d&#34;&gt;struct Vec3{
    float x;
    float y;
    float z;
}

Array!Vec3 positions;

positions[].filter!(v =&amp;gt; v.x &amp;lt; 10.0f);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and you want to filter all vectors where the &lt;code&gt;x component&lt;/code&gt; is less than &lt;code&gt;10.0f&lt;/code&gt;, you  will still only load two additional floats. Also a &lt;code&gt;Vec3&lt;/code&gt; struct won&amp;rsquo;t get bigger in time, other data structures might grow and become a bottleneck in the future.&lt;/p&gt;

&lt;h1 id=&#34;isn-t-soa-premature-optimization:45fcc6ad2f422f60b5d46d1e0ac7de22&#34;&gt;Isn&amp;rsquo;t SoA premature optimization?&lt;/h1&gt;

&lt;p&gt;In my opinion it is not. The problem with &lt;code&gt;AoS&lt;/code&gt; is that if it becomes a performance bottleneck in the future, you will have to refactor a lot of code. For example you might want to pack your data into a struct hot and cold like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-d&#34;&gt;struct Bar{
    struct Hot{
        Data1 d1;
        Data2 d2;
        ...
    }
    struct Cold{
        Data3 d3;
        Data4 d4;
        ...
    }

    Hot* hot;
    Cold* cold;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;but depending on the language you will still have to refactor a lot of code. It might save you some trouble to think about your data access early on.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ZHqFrNyLlpA&#34;&gt;Jonathan Blow&lt;/a&gt; has a language demonstration that covers SoA and anonymous variables.
&lt;em&gt;Quick note: &lt;code&gt;Jonathan Blow&lt;/code&gt;&amp;rsquo;s &lt;code&gt;using&lt;/code&gt; is very similar to &lt;code&gt;alias this&lt;/code&gt; in D.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SoA&lt;/code&gt; isn&amp;rsquo;t much worse compared to &lt;code&gt;AoS&lt;/code&gt; depending on the language you use.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-d&#34;&gt;//AoS
remoteClients[index].address;

//vs 

//SoA
remoteClients.address[index];

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But &lt;code&gt;SoA&lt;/code&gt; scales much better because you can partially access your data without needlessly loading unrelevant data into your cache.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A comparison between C&#43;&#43; and D</title>
      <link>https://maikklein.github.io/post/CppAndD/</link>
      <pubDate>Tue, 01 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://maikklein.github.io/post/CppAndD/</guid>
      <description>

&lt;h1 id=&#34;general:0cb2d9f6a8190c19d85664260328e5f6&#34;&gt;General&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;D has &lt;code&gt;modules&lt;/code&gt; which results in faster build times compared to C++. C++ might get modules after C++17. Clang and MSVC also have experimental support for &lt;code&gt;modules&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;D supports local imports which makes it easy to move functions into different files.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void foo(){
    import std.stdio: writeln;
    writeln(&amp;quot;foo&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;D has integrated &lt;code&gt;unittests&lt;/code&gt; and can be written directly in the source file that you want to test. This means you can write &lt;code&gt;unittests&lt;/code&gt; directly under the function that you are testing.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;class&lt;/code&gt; and &lt;code&gt;struct&lt;/code&gt; have a different meaning in C++ and D. In C++ they almost identical, just with different visibility defaults. In D structs can not use inheritance or interfaces. While classes can have inheritance and interfaces but lack support for deterministic destructors. A full list of differences can be found &lt;a href=&#34;https://dlang.org/spec/struct.html&#34;&gt;here&lt;/a&gt;. Classes in D are usually dynamically allocated, but they can also be allocated on the stack. Classes are by default reference types. If &lt;code&gt;T&lt;/code&gt; is a class then it implicitly is &lt;code&gt;T*&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;D comes with a default GC while C++ is GC free. D can also be used without a GC but there are a few inconveniences. First the standard library(phobos) in D is not move aware. This means you can not have a &lt;code&gt;std::vector&amp;lt;std::unique_ptr&amp;gt;&lt;/code&gt; in phobos. It is possible to write your own containers that are move aware which means it is possible to have an array or vector with unique pointers.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Moving in C++ is just an rvalue cast while in D it really moves. In C++ you would write a function &lt;code&gt;template&amp;lt;class T&amp;gt; void foo(T&amp;amp;&amp;amp; t){}&lt;/code&gt;, it captures &lt;code&gt;t&lt;/code&gt; as &lt;code&gt;T&amp;amp;&amp;amp;&lt;/code&gt; if &lt;code&gt;t&lt;/code&gt; is an rvalue or it captures &lt;code&gt;t&lt;/code&gt; as &lt;code&gt;T&amp;amp;&lt;/code&gt; if &lt;code&gt;t&lt;/code&gt; is an lvalue. You then use &lt;code&gt;std::move&lt;/code&gt; with a &lt;code&gt;move constructor&lt;/code&gt; to move your objects and &lt;code&gt;std::forward&lt;/code&gt; to perfectly forward your objects. In D you would create two functions &lt;code&gt;void foo(T)(ref T t){}&lt;/code&gt; which always captures lvalues by references and &lt;code&gt;void foo(T)(T t){}&lt;/code&gt; which only captures rvalues. As far as I know moving in D is also not exception safe. D moves objects with a bitwise copy, this means you are not allowed to have internal pointers.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;structs&lt;/code&gt; in D don&amp;rsquo;t have a default constructor because every struct needs exception free default construction and this must be known at compile time. But it is possible to initalize structs with custom values.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct Foo{
  int i = 42;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Variables in D are always initialized unless explicity told not to &lt;code&gt;Foo f = void;&lt;/code&gt;. Initialization rules are bit more complicated in C++ and depend on the context.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;D as well as C++ can disable default construction, copy construction and copy assignment. Note that in D it is still possible to call &lt;code&gt;T.init&lt;/code&gt; even if the default constructor is disabled.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In C++ local references can escape the scope while in D they can&amp;rsquo;t.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The allocator in C++ is a template argument (at least in the STL) while in D it can be changed at runtime. This means that you can have different allocators inside an array. You can find more information &lt;a href=&#34;https://dlang.org/phobos/std_experimental_allocator.html&#34;&gt;here&lt;/a&gt;. The allocator in D is still experimental.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;C++ needs explicit function specifiers such as &lt;code&gt;noexcept&lt;/code&gt; &lt;code&gt;const&lt;/code&gt; &lt;code&gt;constexpr&lt;/code&gt; while in D they are inferred if the function/method is a template. This means that &lt;code&gt;void foo(T)(...)nothrow, const, pure, @nogc{}&lt;/code&gt; can just be &lt;code&gt;void foo(T)(...)&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Functions and methods in D can be called without parenthesis if they have no arguments. &lt;code&gt;void foo(){}; foo;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;C++ as well as D have anonymous functions. C++: &lt;code&gt;[](auto a, auto b){ return a + b;}&lt;/code&gt; , D: &lt;code&gt;(a, b) =&amp;gt; a + b&lt;/code&gt; or &lt;code&gt;(a, b){return a + b;}&lt;/code&gt;. As far as I know capturing other variables requires the GC in D. In C++ you can explicitly capture variables by copy, ref or move. Lambda functions in D can not return references. C++17 will also make lambda functions available with &lt;code&gt;constexpr&lt;/code&gt;. Lambda functions can also be used at compile time in D.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Unlike in C++ the order of declarations doesn&amp;rsquo;t matter in D.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;D has built in documentation comments. In C++ you have to use an external tool such as doxygen.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;D has &lt;code&gt;alias this&lt;/code&gt; which makes composition of types without inheritance really easy.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct Foo{
  Bar bar;
  alias bar this;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code above forwards all methods and members from &lt;code&gt;Bar&lt;/code&gt; to &lt;code&gt;Foo&lt;/code&gt; and makes &lt;code&gt;Foo&lt;/code&gt; implicitly convertible to &lt;code&gt;Bar&lt;/code&gt;. The implicit conversion can be removed by using &lt;code&gt;Proxy&lt;/code&gt; instead of alias this.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Operator of overloading in C++ &lt;code&gt;Foo Foo::operator+(Foo const&amp;amp; foo){}&lt;/code&gt;. Operator overloading in D &lt;code&gt;Foo opBinary(string op)(in Foo f)&lt;/code&gt;. This allows the &lt;a href=&#34;http://wiki.dlang.org/Mixin_Macros_Pattern&#34;&gt;mixin macros pattern&lt;/a&gt; which can remove a lot of boilerplate code for you.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;D has universal function call syntax (ufcs). This just means that functions can also be called like methods &lt;code&gt;foo(bar)&lt;/code&gt; or &lt;code&gt;bar.foo()&lt;/code&gt;. This is similar to extension methods in C#. C++17 might also get some form of ufcs.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;C++ has &lt;code&gt;user defined literals&lt;/code&gt; like &lt;code&gt;1_seconds&lt;/code&gt;. D doesn&amp;rsquo;t have this feature but it can be emualted with ufcs &lt;code&gt;1.seconds&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Conditonal compilation uses the pre-processor in C++ &lt;code&gt;#if, #elif, #else, and #endif Directives&lt;/code&gt;. In D it is &lt;code&gt;version(YourKeyword){...}&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Exceptions in D can be allocated by the GC with &lt;code&gt;new&lt;/code&gt; but you can also allocate the storage for an exception yourself.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;C++ has &lt;code&gt;namespaces&lt;/code&gt; and are used like this &lt;code&gt;namespace Foo{ namespace Bar{ namespace Baz{..}}}&lt;/code&gt;. D uses modules with a file structure. To get &lt;code&gt;foo.bar.baz&lt;/code&gt; you can create &lt;code&gt;baz.d&lt;/code&gt; inside the &lt;code&gt;bar&lt;/code&gt; folder and &lt;code&gt;bar&lt;/code&gt; inside the &lt;code&gt;foo&lt;/code&gt; folder.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Globals in D are only thread local by default unless they are immutable. To get thread safe global access you would mark the global variable as &lt;code&gt;shared&lt;/code&gt;. To get the same global variables as in C++ you would use &lt;code&gt;__gshared&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;const&lt;/code&gt; in D is &lt;a href=&#34;https://dlang.org/const-faq.html#transitive-const&#34;&gt;transitive&lt;/a&gt;. In D and C++ it is &lt;code&gt;undefined behaviour&lt;/code&gt; to cast away the &lt;code&gt;const&lt;/code&gt; and modify the object.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;meta-programming:0cb2d9f6a8190c19d85664260328e5f6&#34;&gt;Meta programming&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It is possible to pass almost any value to a template in D. C++ is limited to integrals, chars and addresses of functions and symbols.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Template instantiations are done in C++ with &lt;code&gt;&amp;lt;Foo,Bar&amp;gt;&lt;/code&gt; and in D with &lt;code&gt;!(Foo,bar)&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;D has no fold expressions like C++ &lt;code&gt;foo(f(args)...);&lt;/code&gt;, although they can be implemented as a library.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;D can evaluate almost any function at compile time with very few restrictions. One restriction would be casting see &lt;a href=&#34;http://stackoverflow.com/a/35701007/944430&#34;&gt;answer&lt;/a&gt; for more information where in C++ those functions need to be marked as &lt;code&gt;constexpr&lt;/code&gt; and have many restrictions such as no allocations.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;C++ can have multiple variadic templates &lt;code&gt;template&amp;lt;class... As, class... Bs&amp;gt;&lt;/code&gt; but they need to be inferred. This is not possible in D but you can have templates of templates &lt;code&gt;contains!SomeTypes.all!SomeOtherTypes&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;D can generate strings at compile time and compile them at compile time with &lt;code&gt;mixin&lt;/code&gt;, this is not possible in C++.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;C++ has macros while D does not. &lt;code&gt;mixins&lt;/code&gt; are capable of replacing macros.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;D has static reflection/introspection, this feature might come to C++ after C++17. This can currently be emulated to some extent with &lt;code&gt;libclang&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;D also has &lt;code&gt;user defined attributes&lt;/code&gt; &lt;code&gt;@Encrypted string name;&lt;/code&gt; which can be used by D&amp;rsquo;s static introspection. C++17 gets &lt;code&gt;user defined attributes&lt;/code&gt; in the form of &lt;code&gt;[[YourKeyWord]]&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;D can print any type at runtime with &lt;code&gt;writeln(SomeType.stringof)&lt;/code&gt; or &lt;code&gt;writeln(typeof(somevar).stringof)&lt;/code&gt;. Anything that is available at compile time can be printed at compile time with &lt;code&gt;pragma(msg, SomeType)&lt;/code&gt;. This is very useful for debugging meta programs. C++ can only do this with some compiler hacks as far as I know.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It is possible to pass &lt;code&gt;symbols&lt;/code&gt; to templates in D. &lt;code&gt;template Foo(alias someSymbol)&lt;/code&gt; This just means that it is possible to pass anything that is available at compile time into &lt;code&gt;Foo&lt;/code&gt;. Examples would be other templates, functions, lambdas, constants etc. This is similar to Lisp.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;D has &lt;code&gt;static if&lt;/code&gt;. It is possible to use template specialization in C++ to achieve something similar.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Unsure, need more benchmarks&lt;/em&gt; Compile times for meta programming seems to be roughly equivalent between C++ and D.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In D it is possible to iterate over variadic types with a foreach loop. In C++ this can be achieved as a library, for example with &lt;a href=&#34;https://github.com/boostorg/hana&#34;&gt;Boost hana&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-d&#34;&gt;foreach(index, type; VaradicTypes){
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Variadics in D are automatically expanded while in C++ you expand them explicitly with fold expressions.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Variadics in D can be sliced &lt;code&gt;VariadicTypes[1 .. $]&lt;/code&gt; this creates a variadic type list without the first type.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Type safe OpenGL - Converting strings into types in D</title>
      <link>https://maikklein.github.io/post/2015-11-14-Converting-strings-to-types/</link>
      <pubDate>Sat, 14 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://maikklein.github.io/post/2015-11-14-Converting-strings-to-types/</guid>
      <description>&lt;p&gt;Writing glsl code is usually not that hard but it is easy to make mistakes, especially if you are changing some glsl files and forgetting to update the OpenGL calls.&lt;/p&gt;

&lt;p&gt;We will parse a glsl shader and extract the types as a string at compile time, then we use those strings to create actual types. After we have obtained the types we will generate a wrapper for that glsl shader at compile time.&lt;/p&gt;

&lt;p&gt;The benefit is that we will get a nice interface that won&amp;rsquo;t allow you to make any mistakes. Another benefit will be that if the glsl shader changes the wrapper will change too, which helps you to keep the code in sync by generating helpful compiler errors.&lt;/p&gt;

&lt;p&gt;In this blog post we will learn how we can turn strings into actual types at compile time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-d&#34;&gt;...
in vec2 fragTexCoord;
in vec3 fragNormal;
in vec3 fragVert;
...
[&amp;quot;vec2&amp;quot;,&amp;quot;vec3&amp;quot;,&amp;quot;vec3&amp;quot;] to AliasSeq!(Vector2,Vector2,Vector3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Converting strings to types is very easy in D&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-d&#34;&gt;template glslStringtoTypeV1(string stringType){
  static if(stringType == &amp;quot;int&amp;quot;){
    alias glslStringtoTypeV1 = int;
  }
  else static if(stringType == &amp;quot;float&amp;quot;){
    alias glslStringtoTypeV1 = float;
  }
}
void main()
{
  glslStringtoTypeV1!&amp;quot;float&amp;quot; f; //f is of type float
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But &lt;a href=&#34;https://www.opengl.org/registry/doc/GLSLangSpec.4.40.pdf&#34;&gt;glsl has actually quite a few types&lt;/a&gt; and it would be annoying to  write that many &lt;code&gt;static if&lt;/code&gt; blocks.&lt;/p&gt;

&lt;p&gt;D also has template specializations like C++, maybe this would make the code easier to write?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-d&#34;&gt;template glslStringtoTypeV2(string s){
  static assert(false, s ~ &amp;quot; is not a GLSL type&amp;quot;);
}
template glslStringtoTypeV2(string s: &amp;quot;int&amp;quot;){
  alias glslStringtoTypeV2 = int;
}
template glslStringtoTypeV2(string s: &amp;quot;float&amp;quot;){
  alias glslStringtoTypeV2 = float;
}
void main()
{
  glslStringtoTypeV2!&amp;quot;float&amp;quot; f; //f is of type float
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The nice thing about D is that we can pass almost any value into a template, in this case we use &lt;code&gt;string&lt;/code&gt;. I think the code already looks much easier to write and read but it still has a lot of noise. Maybe we can reduce the noise with &lt;code&gt;template mixins&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Template mixins&lt;/code&gt; allow you to expand a template with the &lt;code&gt;mixin&lt;/code&gt; keyword.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-d&#34;&gt;mixin template AddShader(T,string stringType){
  template glslStringtoTypeV2(string s: stringType){
    alias glslStringtoTypeV2 = T;
  }
}
template glslStringtoTypeV2(string s){
  static assert(false, s ~ &amp;quot; is not a GLSL type&amp;quot;);
}
mixin AddShader!(int,&amp;quot;int&amp;quot;);
mixin AddShader!(int,&amp;quot;float&amp;quot;);
void main()
{
  glslStringtoTypeV2!&amp;quot;float&amp;quot; f; //err
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This looks much better unfortunately this doesn&amp;rsquo;t compile because &lt;code&gt;template mixins&lt;/code&gt; expand into a different scope. D also allows us to insert strings at compile time with &lt;code&gt;mixins&lt;/code&gt;. You can think of them like macros from C but they are more powerful because they are ordinary strings which can be manipulated.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-d&#34;&gt;template AddShader(T,string stringType){
  enum AddShader = 
    &amp;quot;template glslStringtoTypeV2(string s: &amp;quot;~stringType.stringof~&amp;quot;){
         alias glslStringtoTypeV2 = &amp;quot; ~ T.stringof ~ &amp;quot;;&amp;quot; ~
    &amp;quot;}&amp;quot;;
}
template glslStringtoTypeV2(string s){
  static assert(false, s ~ &amp;quot; is not a GLSL type&amp;quot;);
}
mixin(AddShader!(int,&amp;quot;int&amp;quot;));
mixin(AddShader!(float,&amp;quot;float&amp;quot;));

void main()
{
  glslStringtoTypeV2!&amp;quot;float&amp;quot; f; //f is of type float
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is almost as nice as &lt;code&gt;template mixins&lt;/code&gt; but I am not the biggest fan of writing source code as a string. Maybe there is still some room for improvement.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-d&#34;&gt;struct ShaderType(T,string s){
  alias Type = T;
  enum string stringType = s;
}
enum isShaderType(T) = std.traits.isInstanceOf!(ShaderType,T);

template StringTypeGen(string stringType, ShaderTypes...)
  if(allSatisfy!(isShaderType, ShaderTypes)
     &amp;amp;&amp;amp; ShaderTypes.length &amp;gt; 0)
{
  static if(ShaderTypes[0].stringType == stringType ){
    alias StringTypeGen = ShaderTypes[0].Type;
  }
  else static if(ShaderTypes.length == 1){
    static assert(false,stringType ~ &amp;quot; is not a recognized type.&amp;quot;);
  }
  else{
    alias StringTypeGen = StringTypeGen!(stringType, ShaderTypes[1..$]);
  }
}
struct Matrix3{}
struct Vector3{}
alias glslStringToType(string s) = StringTypeGen!(s
    ,ShaderType!(int, &amp;quot;int&amp;quot;)
    ,ShaderType!(float, &amp;quot;float&amp;quot;)
    ,ShaderType!(double, &amp;quot;double&amp;quot;)
    ,ShaderType!(uint, &amp;quot;uint&amp;quot;)
    ,ShaderType!(bool, &amp;quot;bool&amp;quot;)
    ,ShaderType!(Matrix3, &amp;quot;mat3&amp;quot;)
    ,ShaderType!(Vector3, &amp;quot;vec3&amp;quot;)
    //....
);
void main()
{
  glslStringToType!&amp;quot;float&amp;quot; f; //f is of type float
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the final version which was a bit more work to create but it&amp;rsquo;s easy to add glsl types, has nice error messages and is reusable. The last missing part is how we can turn a list of strings into a list of types.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-d&#34;&gt;void main()
{
  alias VertexInput = AliasSeq!(&amp;quot;mat3&amp;quot;,&amp;quot;int&amp;quot;,&amp;quot;vec3&amp;quot;,&amp;quot;double&amp;quot;);
  alias VertexInputTypes = staticMap!(glslStringToType,VertexInput);
  //VertexInputTypes is of type AliasSeq!(Matrix3,int,Vector3,double)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>